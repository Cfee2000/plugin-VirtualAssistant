{
  "description": "Conversations Dialogflow Flex Channels",
  "states": [
    {
      "name": "Trigger",
      "type": "trigger",
      "transitions": [
        {
          "event": "incomingMessage"
        },
        {
          "event": "incomingCall"
        },
        {
          "next": "UpdateConvoParticipantAttributes",
          "event": "incomingConversationMessage"
        },
        {
          "event": "incomingRequest"
        },
        {
          "event": "incomingParent"
        }
      ],
      "properties": {
        "offset": {
          "x": -10,
          "y": -350
        }
      }
    },
    {
      "name": "SetUtteranceVariable",
      "type": "set-variables",
      "transitions": [
        {
          "next": "DialogflowDetectIntent",
          "event": "next"
        }
      ],
      "properties": {
        "variables": [
          {
            "value": "{{trigger.conversation.Body}}",
            "key": "utterance"
          }
        ],
        "offset": {
          "x": 200,
          "y": 180
        }
      }
    },
    {
      "name": "DialogflowDetectIntent",
      "type": "run-function",
      "transitions": [
        {
          "next": "SetDialogflowSession",
          "event": "success"
        },
        {
          "event": "fail"
        }
      ],
      "properties": {
        "service_sid": "ZSc790e8cc3de476372a17143589da0925",
        "environment_sid": "ZE37896d50731ce7155a3f23213041c413",
        "offset": {
          "x": 180,
          "y": 440
        },
        "function_sid": "ZH7b74457511969fa92b8caa8138f18807",
        "parameters": [
          {
            "value": "{{flow.variables.utterance}}",
            "key": "utterance"
          },
          {
            "value": "{{flow.variables.dialogflow_session_id}}",
            "key": "dialogflow_session_id"
          },
          {
            "value": "{{trigger.conversation.ChannelAttributes.pre_engagement_data.email}}",
            "key": "email"
          },
          {
            "value": "{{trigger.conversation.Source}}",
            "key": "ChannelSource"
          },
          {
            "value": "{{trigger.conversation.From}}",
            "key": "Phone"
          },
          {
            "value": "{{trigger.conversation.From}}",
            "key": "gbm_agent"
          },
          {
            "value": "{{widgets.UpdateConvoParticipantAttributes.body}}",
            "key": "customerData"
          }
        ],
        "url": ""
      }
    },
    {
      "name": "SendDialogflowAnswerAndWaitForReply",
      "type": "send-and-wait-for-reply",
      "transitions": [
        {
          "next": "ResetUtteranceVariable",
          "event": "incomingMessage"
        },
        {
          "event": "timeout"
        },
        {
          "event": "deliveryFailure"
        }
      ],
      "properties": {
        "offset": {
          "x": -810,
          "y": 240
        },
        "service": "{{trigger.message.InstanceSid}}",
        "channel": "{{trigger.message.ChannelSid}}",
        "from": "Dialogflow CX Virtual Agent",
        "attributes": "{{widgets.DialogflowDetectIntent.body}}",
        "body": "{% for i in (1..widgets.DialogflowDetectIntent.parsed.virtualAgentReply.size) %}\n{{widgets.DialogflowDetectIntent.parsed.virtualAgentReply[forloop.index0]}}\n{% endfor %}",
        "timeout": "1800"
      }
    },
    {
      "name": "ResetUtteranceVariable",
      "type": "set-variables",
      "transitions": [
        {
          "next": "DialogflowDetectIntent",
          "event": "next"
        }
      ],
      "properties": {
        "variables": [
          {
            "value": "{{widgets.SendDialogflowAnswerAndWaitForReply.inbound.Body}}",
            "key": "utterance"
          }
        ],
        "offset": {
          "x": -310,
          "y": 240
        }
      }
    },
    {
      "name": "WantsToEndSession",
      "type": "split-based-on",
      "transitions": [
        {
          "next": "split_2",
          "event": "noMatch"
        },
        {
          "next": "SendFinalMessage",
          "event": "match",
          "conditions": [
            {
              "friendly_name": "End Session",
              "arguments": [
                "{{widgets.DialogflowDetectIntent.parsed.currentPage.displayName}}"
              ],
              "type": "equal_to",
              "value": "End Session"
            }
          ]
        }
      ],
      "properties": {
        "input": "{{widgets.DialogflowDetectIntent.parsed.currentPage.displayName}}",
        "offset": {
          "x": -210,
          "y": 1170
        }
      }
    },
    {
      "name": "SendFinalMessage",
      "type": "send-message",
      "transitions": [
        {
          "event": "sent"
        },
        {
          "event": "failed"
        }
      ],
      "properties": {
        "offset": {
          "x": 10,
          "y": 1430
        },
        "service": "{{trigger.message.InstanceSid}}",
        "channel": "{{trigger.message.ChannelSid}}",
        "from": "{{flow.channel.address}}",
        "attributes": "{{widgets.DialogflowDetectIntent.body}}",
        "to": "{{contact.channel.address}}",
        "body": "{{widgets.DialogflowDetectIntent.parsed.virtualAgentReply}}"
      }
    },
    {
      "name": "SetDialogflowSession",
      "type": "set-variables",
      "transitions": [
        {
          "next": "WantsAgent",
          "event": "next"
        }
      ],
      "properties": {
        "variables": [
          {
            "value": "{{widgets.DialogflowDetectIntent.parsed.sessionID}}",
            "key": "dialogflow_session_id"
          }
        ],
        "offset": {
          "x": 190,
          "y": 630
        }
      }
    },
    {
      "name": "WantsAgent",
      "type": "split-based-on",
      "transitions": [
        {
          "next": "WantsToEndSession",
          "event": "noMatch"
        },
        {
          "next": "SendConnectingToAgent",
          "event": "match",
          "conditions": [
            {
              "friendly_name": "Wants Agent",
              "arguments": [
                "{{widgets.DialogflowDetectIntent.parsed.liveAgentHandoff}}"
              ],
              "type": "is_not_blank",
              "value": "Is Not Blank"
            }
          ]
        }
      ],
      "properties": {
        "input": "{{widgets.DialogflowDetectIntent.parsed.liveAgentHandoff}}",
        "offset": {
          "x": 200,
          "y": 870
        }
      }
    },
    {
      "name": "SMStoFlex",
      "type": "send-to-flex",
      "transitions": [
        {
          "event": "callComplete"
        },
        {
          "event": "failedToEnqueue"
        },
        {
          "event": "callFailure"
        }
      ],
      "properties": {
        "offset": {
          "x": 590,
          "y": 1650
        },
        "workflow": "WW53bc0c70ccdb58e4bad316aec26cb332",
        "channel": "TC2cb6489eb1780a070686463f2f6e1316",
        "attributes": "{\"from\": \"{{trigger.conversation.From}}\", \"customerName\" : \"{{widgets.UpdateConvoParticipantAttributes.parsed.traits.name}}\"}"
      }
    },
    {
      "name": "SendConnectingToAgent",
      "type": "send-message",
      "transitions": [
        {
          "next": "split_1",
          "event": "sent"
        },
        {
          "event": "failed"
        }
      ],
      "properties": {
        "offset": {
          "x": 470,
          "y": 1150
        },
        "service": "{{trigger.message.InstanceSid}}",
        "channel": "{{trigger.message.ChannelSid}}",
        "from": "Dialogflow CX Virtual Agent",
        "attributes": "{{widgets.DialogflowDetectIntent.body}}",
        "to": "{{contact.channel.address}}",
        "body": "{{widgets.DialogflowDetectIntent.parsed.virtualAgentReply}}"
      }
    },
    {
      "name": "split_1",
      "type": "split-based-on",
      "transitions": [
        {
          "event": "noMatch"
        },
        {
          "next": "SMStoFlex",
          "event": "match",
          "conditions": [
            {
              "friendly_name": "SMS",
              "arguments": [
                "{{trigger.conversation.Source}}"
              ],
              "type": "equal_to",
              "value": "SMS"
            }
          ]
        },
        {
          "next": "WebChatToFlex",
          "event": "match",
          "conditions": [
            {
              "friendly_name": "WebChat",
              "arguments": [
                "{{trigger.conversation.Source}}"
              ],
              "type": "equal_to",
              "value": "API"
            }
          ]
        }
      ],
      "properties": {
        "input": "{{trigger.conversation.Source}}",
        "offset": {
          "x": 830,
          "y": 1360
        }
      }
    },
    {
      "name": "WebChatToFlex",
      "type": "send-to-flex",
      "transitions": [
        {
          "event": "callComplete"
        },
        {
          "event": "failedToEnqueue"
        },
        {
          "event": "callFailure"
        }
      ],
      "properties": {
        "offset": {
          "x": 1210,
          "y": 1650
        },
        "workflow": "WW53bc0c70ccdb58e4bad316aec26cb332",
        "channel": "TC55805adbcd3c3538787db2804e5dc72e",
        "attributes": "{\"from\": \"{{trigger.conversation.ChannelAttributes.pre_engagement_data.friendlyName}}\", \"accident\": true}"
      }
    },
    {
      "name": "UpdateConvoParticipantAttributes",
      "type": "run-function",
      "transitions": [
        {
          "next": "SetUtteranceVariable",
          "event": "success"
        },
        {
          "event": "fail"
        }
      ],
      "properties": {
        "service_sid": "ZSc790e8cc3de476372a17143589da0925",
        "environment_sid": "ZE37896d50731ce7155a3f23213041c413",
        "offset": {
          "x": 200,
          "y": -120
        },
        "function_sid": "ZHc5ca9635121c78dfac7d1ab1395bb709",
        "parameters": [
          {
            "value": "{{trigger.conversation.From}}",
            "key": "identity"
          },
          {
            "value": "{{flow.channel.address}}",
            "key": "conversationSid"
          }
        ],
        "url": ""
      }
    },
    {
      "name": "split_2",
      "type": "split-based-on",
      "transitions": [
        {
          "event": "noMatch"
        },
        {
          "next": "SendDialogflowAnswerAndWaitForReply",
          "event": "match",
          "conditions": [
            {
              "friendly_name": "SMS",
              "arguments": [
                "{{trigger.conversation.Source}}"
              ],
              "type": "equal_to",
              "value": "SMS"
            }
          ]
        },
        {
          "next": "PayloadTransformer",
          "event": "match",
          "conditions": [
            {
              "friendly_name": "WebChat",
              "arguments": [
                "{{trigger.conversation.Source}}"
              ],
              "type": "equal_to",
              "value": "API"
            }
          ]
        }
      ],
      "properties": {
        "input": "{{trigger.conversation.Source}}",
        "offset": {
          "x": -1510,
          "y": 970
        }
      }
    },
    {
      "name": "WebChatSendDialogflowAnswerAndWaitForReply",
      "type": "send-and-wait-for-reply",
      "transitions": [
        {
          "next": "WebChatResetUtteranceVariable",
          "event": "incomingMessage"
        },
        {
          "event": "timeout"
        },
        {
          "event": "deliveryFailure"
        }
      ],
      "properties": {
        "offset": {
          "x": -820,
          "y": 600
        },
        "service": "{{trigger.message.InstanceSid}}",
        "channel": "{{trigger.message.ChannelSid}}",
        "from": "Dialogflow CX Virtual Agent",
        "attributes": "{{widgets.DialogflowDetectIntent.body}}",
        "body": "{% for i in (1..widgets.DialogflowDetectIntent.parsed.virtualAgentReply.size) %}\n{{widgets.DialogflowDetectIntent.parsed.virtualAgentReply[forloop.index0]}}\n{% endfor %}",
        "timeout": "1800"
      }
    },
    {
      "name": "PayloadTransformer",
      "type": "split-based-on",
      "transitions": [
        {
          "next": "WebChatSendDialogflowAnswerAndWaitForReply",
          "event": "noMatch"
        },
        {
          "next": "SendDialogflowAnswerAndWaitForReply",
          "event": "match",
          "conditions": [
            {
              "friendly_name": "No Rich Content",
              "arguments": [
                "{{widgets.DialogflowDetectIntent.parsed.hasPayload}}"
              ],
              "type": "equal_to",
              "value": "false"
            }
          ]
        }
      ],
      "properties": {
        "input": "{{widgets.DialogflowDetectIntent.parsed.hasPayload}}",
        "offset": {
          "x": -1370,
          "y": 600
        }
      }
    },
    {
      "name": "WebChatResetUtteranceVariable",
      "type": "set-variables",
      "transitions": [
        {
          "next": "DialogflowDetectIntent",
          "event": "next"
        }
      ],
      "properties": {
        "variables": [
          {
            "value": "{{widgets.WebChatSendDialogflowAnswerAndWaitForReply.inbound.Body}}",
            "key": "utterance"
          }
        ],
        "offset": {
          "x": -310,
          "y": 590
        }
      }
    }
  ],
  "initial_state": "Trigger",
  "flags": {
    "allow_concurrent_calls": true
  }
}